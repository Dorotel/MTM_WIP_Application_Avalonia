<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="using:MTM_WIP_Application_Avalonia.ViewModels"
             xmlns:materialIcons="using:Material.Icons.Avalonia"
             xmlns:controls="using:MTM_WIP_Application_Avalonia.Controls"
             xmlns:overlay="using:MTM_WIP_Application_Avalonia.Views.Overlay"
             mc:Ignorable="d"
             d:DesignWidth="240"
             d:DesignHeight="600"
             x:Class="MTM_WIP_Application_Avalonia.Views.QuickButtonsView"
             x:CompileBindings="True"
             x:DataType="vm:QuickButtonsViewModel">

  <UserControl.Resources>
    <!-- Resources are now provided by DynamicResource bindings from MTM_Amber.axaml -->
  </UserControl.Resources>

  <UserControl.Styles>
    <!-- MTM Amber Theme Quick Button Styles -->
    <Style Selector="Button.quick-button">
      <Setter Property="Padding" Value="8,8"/>
      <Setter Property="Margin" Value="3,2"/>
      <Setter Property="HorizontalAlignment" Value="Stretch"/>
      <Setter Property="VerticalAlignment" Value="Stretch"/>
      <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
      <Setter Property="VerticalContentAlignment" Value="Center"/>
      <Setter Property="CornerRadius" Value="6"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.BorderDarkBrush}"/>
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.CardBackgroundBrush}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.BodyText}"/>
      <Setter Property="MinHeight" Value="36"/>
      <Setter Property="Cursor" Value="Hand"/>
      <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style Selector="Button.quick-button:pointerover">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.HoverBackground}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.PrimaryAction}"/>
      <Setter Property="BorderThickness" Value="2"/>
    </Style>

    <Style Selector="Button.quick-button:pressed">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.SecondaryAction}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.PrimaryAction}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <!-- MTM Position indicator style -->
    <Style Selector="Border.position-indicator">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.BorderDarkBrush}"/>
      <Setter Property="CornerRadius" Value="4"/>
      <Setter Property="Width" Value="24"/>
      <Setter Property="Height" Value="24"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- MTM Content text styles -->
    <Style Selector="TextBlock.primary-text">
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="FontSize" Value="12"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
      <Setter Property="TextWrapping" Value="Wrap"/>
      <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <Style Selector="TextBlock.secondary-text">
      <Setter Property="FontSize" Value="10"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
      <Setter Property="TextWrapping" Value="Wrap"/>
      <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <Style Selector="TextBlock.operation-text">
      <Setter Property="FontSize" Value="10"/>
      <Setter Property="FontWeight" Value="Bold"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="Margin" Value="4,0,0,0"/>
    </Style>

    <!-- Header panel styling -->
    <Style Selector="Border.header-panel">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.SidebarGradientBrush}"/>
      <Setter Property="CornerRadius" Value="6,6,0,0"/>
    </Style>

    <!-- Context menu styling -->
    <Style Selector="ContextMenu">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.CardBackgroundBrush}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.BorderAccentBrush}"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="CornerRadius" Value="4"/>
    </Style>

    <Style Selector="MenuItem">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
      <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style Selector="MenuItem:pointerover">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.HoverBackground}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <!-- Header Toggle Button Styles - Swapped selected/unselected with inverted hover -->
    <Style Selector="Button.header-toggle-button">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.PrimaryAction}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.BorderAccentBrush}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.TooltipForeground}"/>
      <Setter Property="BorderThickness" Value="2"/>
      <Setter Property="CornerRadius" Value="6"/>
      <Setter Property="Padding" Value="12,8"/>
      <Setter Property="Margin" Value="4,2"/>
      <Setter Property="MinHeight" Value="36"/>
      <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style Selector="Button.header-toggle-button:pointerover">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.CardBackgroundBrush}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.PrimaryAction}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.HeadingText}"/>
    </Style>

    <Style Selector="Button.header-toggle-button.active">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.CardBackgroundBrush}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.PrimaryAction}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.HeadingText}"/>
    </Style>

    <!-- Icon color matching for header toggle buttons -->
    <Style Selector="Button.header-toggle-button materialIcons|MaterialIcon">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <Style Selector="Button.header-toggle-button:pointerover materialIcons|MaterialIcon">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <Style Selector="Button.header-toggle-button.active materialIcons|MaterialIcon">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <!-- TextBlock color matching for header toggle buttons -->
    <Style Selector="Button.header-toggle-button TextBlock">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <Style Selector="Button.header-toggle-button:pointerover TextBlock">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <Style Selector="Button.header-toggle-button.active TextBlock">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <!-- Footer Toggle Button Styles - Swapped coloring with inverted hover -->
    <Style Selector="Button.toggle-button">
      <Setter Property="Background" Value="Transparent"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.PrimaryAction}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.TooltipForeground}"/>
      <Setter Property="BorderThickness" Value="0"/>
      <Setter Property="CornerRadius" Value="4"/>
      <Setter Property="Padding" Value="6,4"/>
      <Setter Property="Margin" Value="2,0"/>
      <Setter Property="MinHeight" Value="28"/>
      <Setter Property="MinWidth" Value="28"/>
    </Style>

    <Style Selector="Button.toggle-button:pointerover">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.CardBackgroundBrush}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.PrimaryAction}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.HeadingText}"/>
    </Style>

    <Style Selector="Button.toggle-button.active">
      <Setter Property="Background" Value="{DynamicResource MTM_Shared_Logic.CardBackgroundBrush}"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MTM_Shared_Logic.BorderDarkBrush}"/>
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.HeadingText}"/>
    </Style>

    <Style Selector="Button.toggle-button materialIcons|MaterialIcon">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <Style Selector="Button.toggle-button:pointerover materialIcons|MaterialIcon">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>

    <Style Selector="Button.toggle-button.active materialIcons|MaterialIcon">
      <Setter Property="Foreground" Value="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"/>
    </Style>
  </UserControl.Styles>

  <!-- Main container with transparent background to blend with parent -->
  <Grid Margin="4" Background="Transparent">
    <!-- Main content with header, content, and footer -->
    <Grid x:Name="MainContentGrid" RowDefinitions="Auto,*,Auto">
      <!-- Simplified Header with Toggle Buttons -->
      <Border Grid.Row="0"
              Classes="header-panel"
              Padding="12,8"
              Margin="0,0,0,8">
        <Grid ColumnDefinitions="*,Auto,*">
          <!-- Left: Quick Actions Button -->
          <Button Grid.Column="0"
                  Classes="header-toggle-button"
                  Classes.active="{Binding !IsShowingHistory}"
                  Command="{Binding ShowQuickActionsCommand}"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  ToolTip.Tip="Show Quick Actions">
            <StackPanel Orientation="Horizontal" Spacing="6">
              <materialIcons:MaterialIcon Kind="Flash" Width="14" Height="14"/>
              <TextBlock Text="Quick Actions" FontSize="11" FontWeight="Medium"/>
            </StackPanel>
          </Button>

          <!-- Right: Transaction History Button -->
          <Button Grid.Column="2"
                  Classes="header-toggle-button"
                  Classes.active="{Binding IsShowingHistory}"
                  Command="{Binding ShowHistoryCommand}"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Center"
                  ToolTip.Tip="Show Transaction History">
            <StackPanel Orientation="Horizontal" Spacing="6">
              <materialIcons:MaterialIcon Kind="ClockOutline" Width="14" Height="14"/>
              <TextBlock Text="History" FontSize="11" FontWeight="Medium"/>
            </StackPanel>
          </Button>
        </Grid>
      </Border>

      <!-- Dynamic Content Area -->
      <Grid Grid.Row="1" Background="Transparent">

        <!-- Quick Actions Panel -->
        <ScrollViewer IsVisible="{Binding !IsShowingHistory}"
                      VerticalScrollBarVisibility="Auto"
                      HorizontalScrollBarVisibility="Disabled"
                      Background="Transparent"
                      Padding="4">
          <ItemsControl ItemsSource="{Binding NonEmptyQuickButtons}">
            <!-- Use StackPanel for dynamic vertical layout with drag/drop -->
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel Orientation="Vertical" Spacing="4"/>
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate DataType="vm:QuickButtonItemViewModel">
                <Button Classes="quick-button"
                        Command="{Binding $parent[UserControl].((vm:QuickButtonsViewModel)DataContext).ExecuteQuickActionCommand}"
                        CommandParameter="{Binding}"
                        ToolTip.Tip="{Binding ToolTipText}">
                  <Button.ContextMenu>
                    <ContextMenu>
                      <MenuItem Header="🗑️ Remove Button"
                                Click="OnRemoveButtonClick"
                                ToolTip.Tip="Delete this quick action"/>
                      <Separator/>
                      <MenuItem Header="↑ Move Up"
                                Command="{Binding $parent[UserControl].((vm:QuickButtonsViewModel)DataContext).MoveButtonUpCommand}"
                                CommandParameter="{Binding}"
                                ToolTip.Tip="Move button up in order"/>
                      <MenuItem Header="↓ Move Down"
                                Command="{Binding $parent[UserControl].((vm:QuickButtonsViewModel)DataContext).MoveButtonDownCommand}"
                                CommandParameter="{Binding}"
                                ToolTip.Tip="Move button down in order"/>
                      <Separator/>
                      <MenuItem Header="🔄 Refresh Buttons"
                                Command="{Binding $parent[UserControl].((vm:QuickButtonsViewModel)DataContext).RefreshButtonsCommand}"
                                ToolTip.Tip="Reload quick actions from database"/>
                      <MenuItem Header="🧹 Clear All Buttons"
                                Command="{Binding $parent[UserControl].((vm:QuickButtonsViewModel)DataContext).ClearAllButtonsCommand}"
                                ToolTip.Tip="Remove all quick actions"/>
                      <MenuItem Header="↕️ Reset Order"
                                Command="{Binding $parent[UserControl].((vm:QuickButtonsViewModel)DataContext).ResetOrderCommand}"
                                ToolTip.Tip="Restore default button order"/>
                    </ContextMenu>
                  </Button.ContextMenu>
                  <Grid ColumnDefinitions="Auto,8,*,Auto,Auto">
                    <!-- MTM Industrial position indicator -->
                    <Border Grid.Column="0" Classes="position-indicator">
                      <TextBlock Text="{Binding Position}"
                                 Foreground="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"
                                 FontSize="11"
                                 FontWeight="Bold"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"/>
                    </Border>

                    <!-- Button content with MTM typography - Only Part ID -->
                    <StackPanel Grid.Column="2" Spacing="2" VerticalAlignment="Center">
                      <TextBlock Text="{Binding DisplayText}"
                                 Classes="primary-text"/>
                    </StackPanel>

                    <!-- Quantity indicator with lighter background -->
                    <Border Grid.Column="3"
                            Background="Transparent"
                            CornerRadius="4"
                            Padding="6,2"
                            Margin="0,0,4,0"
                            VerticalAlignment="Center">
                      <TextBlock FontSize="10"
                                 FontWeight="Bold"
                                 Foreground="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"
                                 ToolTip.Tip="Quantity">
                        <Run Text="x "/>
                        <Run Text="{Binding Quantity}"/>
                      </TextBlock>
                    </Border>

                    <!-- Operation indicator with lighter background and Op. label -->
                    <Border Grid.Column="4"
                            Background="{DynamicResource MTM_Shared_Logic.BorderDarkBrush}"
                            CornerRadius="4"
                            Padding="6,2"
                            VerticalAlignment="Center">
                      <StackPanel Spacing="1" HorizontalAlignment="Center">
                        <TextBlock Text="Op."
                                   FontSize="8"
                                   FontWeight="Bold"
                                   Foreground="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"
                                   HorizontalAlignment="Center"/>
                        <TextBlock Text="{Binding Operation}"
                                   Foreground="{DynamicResource MTM_Shared_Logic.OverlayTextBrush}"
                                   FontSize="10"
                                   FontWeight="Bold"
                                   HorizontalAlignment="Center"
                                   ToolTip.Tip="Operation Number"/>
                      </StackPanel>
                    </Border>
                  </Grid>
                </Button>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </ScrollViewer>

        <!-- Transaction History Panel -->
        <ScrollViewer IsVisible="{Binding IsShowingHistory}"
                      VerticalScrollBarVisibility="Auto"
                      HorizontalScrollBarVisibility="Disabled"
                      Background="Transparent"
                      Padding="4">

          <!-- Use ItemsControl with TransactionExpandableButton controls -->
          <ItemsControl ItemsSource="{Binding SessionTransactionHistory}">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel Orientation="Vertical" Spacing="2"/>
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <controls:TransactionExpandableButton
                  PartId="{Binding PartId}"
                  Operation="{Binding Operation}"
                  Quantity="{Binding Quantity}"
                  Location="{Binding Location}"
                  User="{Binding User}"
                  TransactionTime="{Binding TransactionTime}"
                  Status="{Binding Status}"
                  ItemType="{Binding ItemType}"
                  TransactionId="{Binding BatchNumber}"
                  Notes="{Binding Notes}"
                  TransactionType="{Binding TransactionType}"/>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>

        </ScrollViewer>

      </Grid>

      <!-- Comprehensive Footer Section with QoL Buttons and Debug Information -->
      <Border Grid.Row="2"
              Classes="header-panel"
              Padding="8"
              Margin="0,8,0,0">
        <!-- QoL Buttons Row - Icon-only with tooltips for compact layout -->
        <StackPanel Orientation="Horizontal"
                    Spacing="2"
                    HorizontalAlignment="Center">

          <!-- New Button -->
          <Button Classes="toggle-button"
                  Command="{Binding NewQuickButtonCommand}"
                  ToolTip.Tip="Create new quick button">
            <materialIcons:MaterialIcon Kind="Plus" Width="14" Height="14"/>
          </Button>

          <!-- Refresh All Button -->
          <Button Classes="toggle-button"
                  Command="{Binding RefreshButtonsCommand}"
                  ToolTip.Tip="Refresh quick buttons from database">
            <materialIcons:MaterialIcon Kind="Refresh" Width="14" Height="14"/>
          </Button>

          <!-- Clear All Button -->
          <Button Classes="toggle-button"
                  Command="{Binding ClearAllButtonsCommand}"
                  ToolTip.Tip="Remove all quick actions">
            <materialIcons:MaterialIcon Kind="DeleteSweep" Width="14" Height="14"/>
          </Button>

          <!-- Reset Order Button -->
          <Button Classes="toggle-button"
                  Command="{Binding ResetOrderCommand}"
                  ToolTip.Tip="Reset button order to default">
            <materialIcons:MaterialIcon Kind="SortAlphabeticalAscending" Width="14" Height="14"/>
          </Button>

          <!-- Export Settings Button -->
          <Button Classes="toggle-button"
                  Command="{Binding ExportQuickButtonsCommand}"
                  ToolTip.Tip="Export quick buttons configuration">
            <materialIcons:MaterialIcon Kind="Export" Width="14" Height="14"/>
          </Button>

          <!-- Import Settings Button -->
          <Button Classes="toggle-button"
                  Command="{Binding ImportQuickButtonsCommand}"
                  ToolTip.Tip="Import quick buttons configuration">
            <materialIcons:MaterialIcon Kind="Import" Width="14" Height="14"/>
          </Button>

          <!-- Help/Info Button -->
          <Button Classes="toggle-button"
                  ToolTip.Tip="Show quick buttons help and keyboard shortcuts">
            <materialIcons:MaterialIcon Kind="HelpCircleOutline" Width="14" Height="14"/>
          </Button>

        </StackPanel>
      </Border>
    </Grid>
  </Grid>
</UserControl>
