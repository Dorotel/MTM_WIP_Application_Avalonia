<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  
  <!-- QA Verify Snippet -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>@qa:verify</Title>
      <Shortcut>qav</Shortcut>
      <Description>MTM Quality Assurance Code Verification</Description>
      <Author>MTM WIP Application</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp">
        <![CDATA[Act as Quality Assurance Auditor Copilot. Verify code compliance for $filename$ against MTM WIP Application instruction guidelines.

Focus on:
- MTM naming conventions compliance  
- ReactiveUI pattern implementation
- MVVM separation validation
- Error handling integration
- UI generation standards
- Database access patterns

Generate a structured compliance report with priority levels and actionable remediation steps for:
$filename$]]>
      </Code>
      <Declarations>
        <Literal>
          <ID>filename</ID>
          <ToolTip>Enter the filename to verify</ToolTip>
          <Default>AdvancedRemoveView.axaml</Default>
        </Literal>
      </Declarations>
    </Snippet>
  </CodeSnippet>

  <!-- UI Create Snippet -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>@ui:create</Title>
      <Shortcut>uic</Shortcut>
      <Description>MTM UI Element Creation</Description>
      <Author>MTM WIP Application</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp">
        <![CDATA[Act as UI Architect Copilot. Create a new Avalonia UI element for $componentname$ following MTM patterns.

Requirements:
- Generate AXAML with compiled bindings
- Apply MTM purple theme and design system
- Implement modern layout patterns with proper spacing
- Use appropriate Avalonia controls and ReactiveUI integration
- Follow MTM naming conventions
- Include proper event handler stubs
- Ensure responsive design and accessibility

Component: $componentname$
Purpose: $purpose$]]>
      </Code>
      <Declarations>
        <Literal>
          <ID>componentname</ID>
          <ToolTip>Enter the component name</ToolTip>
          <Default>NewComponent</Default>
        </Literal>
        <Literal>
          <ID>purpose</ID>
          <ToolTip>Enter the component purpose</ToolTip>
          <Default>User interface component</Default>
        </Literal>
      </Declarations>
    </Snippet>
  </CodeSnippet>

  <!-- Business Handler Snippet -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>@biz:handler</Title>
      <Shortcut>bizh</Shortcut>
      <Description>MTM Business Logic Handler</Description>
      <Author>MTM WIP Application</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp">
        <![CDATA[Act as Application Logic Copilot. Create a business logic handler class for $functionality$ following MTM patterns.

Requirements:
- Implement comprehensive business rule validation
- Use Result<T> pattern for operation responses
- Integrate with MTM database patterns via stored procedures
- Apply proper error handling with logging
- Ensure no UI dependencies (pure business logic)
- Follow MTM naming conventions
- Include proper dependency injection preparation
- Implement async/await patterns where appropriate

Functionality: $functionality$
Business Rules: $rules$]]>
      </Code>
      <Declarations>
        <Literal>
          <ID>functionality</ID>
          <ToolTip>Enter the business functionality</ToolTip>
          <Default>inventory operations</Default>
        </Literal>
        <Literal>
          <ID>rules</ID>
          <ToolTip>Enter specific business rules</ToolTip>
          <Default>MTM standard validation</Default>
        </Literal>
      </Declarations>
    </Snippet>
  </CodeSnippet>

  <!-- Database Procedure Snippet -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>@db:procedure</Title>
      <Shortcut>dbp</Shortcut>
      <Description>MTM Database Stored Procedure</Description>
      <Author>MTM WIP Application</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp">
        <![CDATA[Act as Data Access Copilot. Create a stored procedure for $operation$ following MTM database patterns.

Requirements:
- Implement standardized input validation
- Use consistent output parameters (@RowsAffected, @ErrorMessage, @StatusCode)
- Apply MTM business logic (TransactionType based on user intent)
- Include comprehensive error handling with try-catch blocks
- Implement proper transaction management
- Follow MTM naming conventions for procedures and parameters
- Include helpful comments and documentation
- Validate all inputs and provide meaningful error messages

Operation: $operation$
Tables Involved: $tables$]]>
      </Code>
      <Declarations>
        <Literal>
          <ID>operation</ID>
          <ToolTip>Enter the database operation</ToolTip>
          <Default>inventory management</Default>
        </Literal>
        <Literal>
          <ID>tables</ID>
          <ToolTip>Enter tables involved</ToolTip>
          <Default>inventory, locations</Default>
        </Literal>
      </Declarations>
    </Snippet>
  </CodeSnippet>

</CodeSnippets>