#!/bin/bash
# GSC Constitution Command - Shell Wrapper for Cross-Platform Compatibility
# Date: September 28, 2025
# Purpose: Cross-platform shell wrapper for gsc-constitution.ps1 with PowerShell Core detection

# GSC Constitution Shell Wrapper
# Provides cross-platform compatibility for Windows, macOS, and Linux
# Automatically detects and uses PowerShell Core 7.0+

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script metadata
SCRIPT_NAME="gsc-constitution"
SCRIPT_VERSION="1.0.0"
REQUIRED_PWSH_VERSION="7.0"

# Helper functions
log_info() {
    echo -e "${CYAN}[GSC-Constitution]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[GSC-Constitution] WARNING:${NC} $1"
}

log_error() {
    echo -e "${RED}[GSC-Constitution] ERROR:${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[GSC-Constitution]${NC} $1"
}

# Show help information
show_help() {
    cat << EOF
GSC Constitution Command - Cross-Platform Shell Wrapper

SYNOPSIS:
    $0 [OPTIONS]

DESCRIPTION:
    Enhanced constitution command that displays project constitution with integrated
    memory pattern processing and manufacturing domain context.

OPTIONS:
    -a, --action ACTION      Action to perform (display, validate, update, memory-sync, interactive)
                            Default: display

    -f, --format FORMAT      Output format (console, markdown, json, interactive, copilot-chat)
                            Default: console

    -m, --memory            Enable memory pattern integration (true/false)
                            Default: true

    -v, --validate          Validate constitution against current project state
                            Default: false

    -o, --output PATH       Output file path (optional)

    -h, --help              Show this help message

    --version               Show version information

EXAMPLES:
    $0 -a display -f console
        Display constitution in console format

    $0 -a memory-sync -m true
        Sync constitution with memory patterns

    $0 -a validate -v true -f json
        Validate constitution and output results in JSON format

REQUIREMENTS:
    - PowerShell Core 7.0 or later
    - Cross-platform compatibility (Windows, macOS, Linux)
    - GSC PowerShell modules available

Generated by GSC Constitution Command - $(date '+%Y-%m-%d %H:%M:%S')
EOF
}

# Check PowerShell availability and version
check_powershell() {
    local pwsh_cmd=""

    # Try to find PowerShell Core
    if command -v pwsh >/dev/null 2>&1; then
        pwsh_cmd="pwsh"
    elif command -v powershell >/dev/null 2>&1; then
        # Check if it's PowerShell Core on Windows
        local ps_version
        ps_version=$(powershell -Command '$PSVersionTable.PSVersion.Major' 2>/dev/null || echo "0")
        if [ "$ps_version" -ge 6 ]; then
            pwsh_cmd="powershell"
        fi
    fi

    if [ -z "$pwsh_cmd" ]; then
        log_error "PowerShell Core 7.0+ not found. Please install PowerShell Core."
        log_info "Installation instructions:"
        log_info "  Windows: winget install Microsoft.PowerShell"
        log_info "  macOS:   brew install powershell"
        log_info "  Linux:   https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux"
        exit 1
    fi

    # Verify version
    local version
    version=$($pwsh_cmd -Command '$PSVersionTable.PSVersion.Major' 2>/dev/null || echo "0")

    if [ "$version" -lt 7 ]; then
        log_error "PowerShell Core 7.0+ required. Found version: $version"
        exit 1
    fi

    log_info "Using PowerShell Core version $version"
    echo "$pwsh_cmd"
}

# Get script directory (cross-platform)
get_script_dir() {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ]; do
        local dir
        dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
        source="$(readlink "$source")"
        [[ $source != /* ]] && source="$dir/$source"
    done
    echo "$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
}

# Main execution function
main() {
    local action="display"
    local format="console"
    local memory_integration="true"
    local validate="false"
    local output_path=""
    local show_version=false

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -a|--action)
                action="$2"
                shift 2
                ;;
            -f|--format)
                format="$2"
                shift 2
                ;;
            -m|--memory)
                memory_integration="$2"
                shift 2
                ;;
            -v|--validate)
                validate="true"
                shift
                ;;
            -o|--output)
                output_path="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            --version)
                show_version=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                log_info "Use -h or --help for usage information"
                exit 1
                ;;
        esac
    done

    # Show version if requested
    if [ "$show_version" = true ]; then
        echo "$SCRIPT_NAME version $SCRIPT_VERSION"
        echo "GSC Constitution Command - Cross-Platform Shell Wrapper"
        echo "Date: September 28, 2025"
        exit 0
    fi

    # Validate action parameter
    case "$action" in
        display|validate|update|memory-sync|interactive)
            ;;
        *)
            log_error "Invalid action: $action"
            log_info "Valid actions: display, validate, update, memory-sync, interactive"
            exit 1
            ;;
    esac

    # Validate format parameter
    case "$format" in
        console|markdown|json|interactive|copilot-chat)
            ;;
        *)
            log_error "Invalid format: $format"
            log_info "Valid formats: console, markdown, json, interactive, copilot-chat"
            exit 1
            ;;
    esac

    # Check PowerShell availability
    local pwsh_cmd
    pwsh_cmd=$(check_powershell)

    # Get script paths
    local script_dir
    script_dir=$(get_script_dir)
    local ps_script="$script_dir/gsc-constitution.ps1"

    # Verify PowerShell script exists
    if [ ! -f "$ps_script" ]; then
        log_error "PowerShell script not found: $ps_script"
        exit 1
    fi

    log_info "Executing GSC Constitution command..."
    log_info "Action: $action, Format: $format, Memory Integration: $memory_integration"

    # Build PowerShell command
    local ps_args=(
        "-Action" "$action"
        "-Format" "$format"
        "-MemoryIntegration" "\$$memory_integration"
        "-Validate" "\$$validate"
    )

    if [ -n "$output_path" ]; then
        ps_args+=("-OutputPath" "$output_path")
    fi

    # Execute PowerShell script
    log_info "Launching PowerShell Core..."
    if ! "$pwsh_cmd" -File "$ps_script" "${ps_args[@]}"; then
        log_error "PowerShell script execution failed"
        exit 1
    fi

    log_success "GSC Constitution command completed successfully"
}

# Error handling
trap 'log_error "Script interrupted"; exit 130' INT
trap 'log_error "Script terminated"; exit 143' TERM

# Execute main function with all arguments
main "$@"
