name: Automated Sprint Planning

on:
  schedule:
    # Every Monday at 9 AM UTC for sprint planning
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      sprint_action:
        description: 'Sprint planning action'
        required: true
        default: 'start-new-sprint'
        type: choice
        options:
          - start-new-sprint
          - end-current-sprint
          - sprint-retrospective
          - backlog-grooming
      sprint_duration:
        description: 'Sprint duration in weeks'
        required: false
        default: '2'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'

jobs:
  sprint-planning:
    name: Automated Sprint Planning
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: read
      projects: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Calculate Sprint Dates
      id: sprint_dates
      run: |
        # Get current date and calculate sprint dates
        CURRENT_DATE=$(date '+%Y-%m-%d')
        SPRINT_DURATION=${{ github.event.inputs.sprint_duration || '2' }}
        
        # Calculate sprint start (next Monday if not Monday)
        SPRINT_START=$(date -d "next monday" '+%Y-%m-%d' 2>/dev/null || date -v +1w -v monday '+%Y-%m-%d')
        if [ "$(date '+%u')" = "1" ]; then
          SPRINT_START=$CURRENT_DATE
        fi
        
        # Calculate sprint end date
        SPRINT_END=$(date -d "$SPRINT_START + $SPRINT_DURATION weeks - 1 day" '+%Y-%m-%d' 2>/dev/null || date -j -v +${SPRINT_DURATION}w -v -1d -f "%Y-%m-%d" "$SPRINT_START" '+%Y-%m-%d')
        
        # Calculate sprint number (weeks since project start)
        PROJECT_START="2025-09-01"
        WEEKS_SINCE_START=$(( ($(date -d "$SPRINT_START" +%s) - $(date -d "$PROJECT_START" +%s)) / 604800 ))
        SPRINT_NUMBER=$((WEEKS_SINCE_START / SPRINT_DURATION + 1))
        
        echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
        echo "sprint_start=$SPRINT_START" >> $GITHUB_OUTPUT
        echo "sprint_end=$SPRINT_END" >> $GITHUB_OUTPUT
        echo "sprint_number=$SPRINT_NUMBER" >> $GITHUB_OUTPUT
        echo "sprint_duration=$SPRINT_DURATION" >> $GITHUB_OUTPUT
        
    - name: Analyze Current Sprint Status
      id: sprint_analysis
      run: |
        # Query GitHub Issues API for current sprint status
        OPEN_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=sprint:current" | \
          jq length)
          
        COMPLETED_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues?state=closed&labels=sprint:current&since=$(date -d '14 days ago' --iso-8601)" | \
          jq length)
          
        IN_PROGRESS_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=status:in-progress" | \
          jq length)
          
        BLOCKED_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=status:blocked" | \
          jq length)
        
        echo "open_issues=$OPEN_ISSUES" >> $GITHUB_OUTPUT
        echo "completed_issues=$COMPLETED_ISSUES" >> $GITHUB_OUTPUT
        echo "in_progress_issues=$IN_PROGRESS_ISSUES" >> $GITHUB_OUTPUT
        echo "blocked_issues=$BLOCKED_ISSUES" >> $GITHUB_OUTPUT
        
        # Calculate sprint velocity
        TOTAL_SPRINT_ISSUES=$((OPEN_ISSUES + COMPLETED_ISSUES))
        if [ $TOTAL_SPRINT_ISSUES -gt 0 ]; then
          COMPLETION_RATE=$(( (COMPLETED_ISSUES * 100) / TOTAL_SPRINT_ISSUES ))
        else
          COMPLETION_RATE=0
        fi
        
        echo "completion_rate=$COMPLETION_RATE" >> $GITHUB_OUTPUT
        
    - name: Create Sprint Planning Issue
      if: github.event.inputs.sprint_action == 'start-new-sprint' || github.event.inputs.sprint_action == ''
      uses: actions/github-script@v7
      with:
        script: |
          const { 
            sprint_start, 
            sprint_end, 
            sprint_number, 
            sprint_duration,
            open_issues,
            completed_issues,
            in_progress_issues,
            blocked_issues,
            completion_rate 
          } = process.env;
          
          const issueBody = `## üèÉ‚Äç‚ôÇÔ∏è Sprint ${sprint_number} Planning
          
          **Sprint Duration**: ${sprint_duration} week(s)  
          **Start Date**: ${sprint_start}  
          **End Date**: ${sprint_end}  
          
          ### Previous Sprint Analysis
          | Metric | Value |
          |--------|-------|
          | **Completion Rate** | ${completion_rate}% |
          | **Completed Issues** | ${completed_issues} |
          | **Open Issues** | ${open_issues} |
          | **In Progress** | ${in_progress_issues} |
          | **Blocked Issues** | ${blocked_issues} |
          
          ### Sprint ${sprint_number} Objectives
          
          #### Primary Goals
          - [ ] **Phase 3 Automation**: Continue implementation of automation tasks
          - [ ] **Code Quality**: Address technical debt and improve test coverage
          - [ ] **Documentation**: Enhance architectural and code documentation
          - [ ] **Infrastructure**: Optimize CI/CD pipeline and deployment processes
          
          #### Key Results (OKRs)
          - [ ] Complete 80% of committed sprint items
          - [ ] Maintain code review coverage at 100%
          - [ ] Increase automated test coverage by 5%
          - [ ] Reduce average cycle time to <5 days
          
          ### Sprint Backlog Planning
          
          #### High Priority Items
          - [ ] **MTM_AUTO_001**: Complete automated issue creation workflows
          - [ ] **MTM_AUTO_002**: Implement PR status automation
          - [ ] **MTM_AUTO_003**: Sprint planning workflow automation  
          - [ ] **MTM_AUTO_004**: Technical debt auto-creation system
          
          #### Medium Priority Items
          - [ ] **MTM_ARCH_001**: C4 Model diagrams creation
          - [ ] **MTM_ARCH_002**: Domain-Driven Design documentation
          - [ ] **MTM_QUAL_001**: Code review guidelines
          - [ ] **MTM_QUAL_002**: Coding standards documentation
          
          #### Stretch Goals
          - [ ] **MTM_DB_001**: Stored procedures documentation
          - [ ] **MTM_DB_002**: Database schema diagrams
          
          ### Capacity Planning
          
          #### Available Capacity
          - **Team Size**: 1 developer (Dorotel)
          - **Sprint Duration**: ${sprint_duration} week(s)
          - **Available Hours**: ~${parseInt(sprint_duration) * 40} hours
          - **Story Points Capacity**: ~${parseInt(sprint_duration) * 20} points
          
          #### Risk Assessment
          ${parseInt(blocked_issues) > 0 ? `‚ö†Ô∏è **Blocked Issues**: ${blocked_issues} issues currently blocked` : ''}
          ${parseInt(completion_rate) < 70 ? `‚ö†Ô∏è **Low Completion Rate**: Previous sprint completion at ${completion_rate}%` : ''}
          ${parseInt(in_progress_issues) > 5 ? `‚ö†Ô∏è **High WIP**: ${in_progress_issues} issues in progress` : ''}
          
          ### Definition of Done
          - [ ] All acceptance criteria met
          - [ ] Code review completed and approved
          - [ ] Automated tests written and passing
          - [ ] Documentation updated
          - [ ] CI/CD pipeline passing
          - [ ] Stakeholder demo completed
          
          ### Sprint Ceremonies
          
          #### Daily Standups
          - **Time**: 9:00 AM UTC
          - **Format**: Async updates in project channel
          - **Questions**: What did I complete? What will I work on? Any blockers?
          
          #### Sprint Review
          - **Date**: ${sprint_end}
          - **Agenda**: Demo completed items, stakeholder feedback
          
          #### Sprint Retrospective  
          - **Date**: ${sprint_end}
          - **Agenda**: What went well? What can improve? Action items
          
          ### Success Metrics
          - [ ] **Velocity**: Target ${parseInt(sprint_duration) * 15} story points
          - [ ] **Cycle Time**: Average <5 days per issue
          - [ ] **Quality**: Zero critical bugs in production
          - [ ] **Documentation**: All new features documented
          
          ---
          
          ### Action Items
          - [ ] Review and refine backlog items
          - [ ] Assign story points to all items
          - [ ] Identify dependencies and blockers
          - [ ] Set up sprint board in project management tool
          - [ ] Communicate sprint goals to stakeholders
          
          ---
          *This issue was automatically created by MTM Sprint Automation*  
          *Sprint Planning Date: ${new Date().toISOString().split('T')[0]}*
          `;
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üèÉ‚Äç‚ôÇÔ∏è Sprint ${sprint_number} Planning (${sprint_start} - ${sprint_end})`,
            body: issueBody,
            labels: [
              'sprint-planning', 
              'automated', 
              'priority:high', 
              'type:planning',
              `sprint:${sprint_number}`,
              'status:active'
            ],
            assignees: ['Dorotel']
          });
          
          return issue.data;
      env:
        sprint_start: ${{ steps.sprint_dates.outputs.sprint_start }}
        sprint_end: ${{ steps.sprint_dates.outputs.sprint_end }}
        sprint_number: ${{ steps.sprint_dates.outputs.sprint_number }}
        sprint_duration: ${{ steps.sprint_dates.outputs.sprint_duration }}
        open_issues: ${{ steps.sprint_analysis.outputs.open_issues }}
        completed_issues: ${{ steps.sprint_analysis.outputs.completed_issues }}
        in_progress_issues: ${{ steps.sprint_analysis.outputs.in_progress_issues }}
        blocked_issues: ${{ steps.sprint_analysis.outputs.blocked_issues }}
        completion_rate: ${{ steps.sprint_analysis.outputs.completion_rate }}
        
    - name: Create Sprint Retrospective Issue
      if: github.event.inputs.sprint_action == 'sprint-retrospective'
      uses: actions/github-script@v7
      with:
        script: |
          const { completion_rate, completed_issues, open_issues } = process.env;
          
          const issueBody = `## üîÑ Sprint Retrospective
          
          ### Sprint Performance Summary
          | Metric | Value | Target | Status |
          |--------|-------|--------|--------|
          | **Completion Rate** | ${completion_rate}% | 80% | ${parseInt(completion_rate) >= 80 ? '‚úÖ Met' : '‚ùå Missed'} |
          | **Completed Issues** | ${completed_issues} | - | - |
          | **Open Issues** | ${open_issues} | 0 | ${parseInt(open_issues) === 0 ? '‚úÖ Good' : '‚ö†Ô∏è Carryover'} |
          
          ### Retrospective Questions
          
          #### üü¢ What Went Well?
          - [ ] List successful practices and achievements
          - [ ] Identify processes that should be continued
          - [ ] Highlight team collaboration wins
          - [ ] Note technical accomplishments
          
          #### üî¥ What Could Be Improved?
          - [ ] Identify bottlenecks and pain points
          - [ ] List process inefficiencies
          - [ ] Note communication challenges
          - [ ] Highlight technical debt created
          
          #### üîµ What Did We Learn?
          - [ ] Technical insights gained
          - [ ] Process lessons learned
          - [ ] Tool effectiveness evaluation
          - [ ] Stakeholder feedback integration
          
          #### üü° Action Items for Next Sprint
          - [ ] Process improvements to implement
          - [ ] Tools to adopt or change
          - [ ] Communication enhancements
          - [ ] Technical practices to refine
          
          ### Metrics Deep Dive
          
          #### Velocity Analysis
          - **Planned Story Points**: _To be filled_
          - **Completed Story Points**: _To be filled_
          - **Velocity Trend**: _Compared to previous sprints_
          
          #### Quality Metrics
          - **Code Review Coverage**: _To be filled_
          - **Test Coverage**: _To be filled_
          - **Bugs Introduced**: _To be filled_
          - **Technical Debt Added**: _To be filled_
          
          #### Cycle Time Analysis
          - **Average Cycle Time**: _To be filled_
          - **Longest Item Cycle Time**: _To be filled_
          - **Items Exceeding Target**: _To be filled_
          
          ### Improvement Experiments
          
          #### Experiment 1: [Title]
          - **Hypothesis**: _What we think will improve_
          - **Measure**: _How we'll know it worked_
          - **Timeline**: _When to evaluate_
          
          #### Experiment 2: [Title]
          - **Hypothesis**: _What we think will improve_
          - **Measure**: _How we'll know it worked_
          - **Timeline**: _When to evaluate_
          
          ### Team Health Check
          - [ ] **Morale**: How is team feeling? (1-5 scale)
          - [ ] **Workload**: Is the work sustainable? (1-5 scale)  
          - [ ] **Learning**: Are we growing technically? (1-5 scale)
          - [ ] **Purpose**: Do we understand the business value? (1-5 scale)
          
          ### Next Sprint Preparation
          - [ ] Update team capacity for next sprint
          - [ ] Refine backlog based on learnings
          - [ ] Adjust process based on improvements
          - [ ] Schedule necessary training or tools setup
          
          ---
          *This retrospective was automatically created by MTM Sprint Automation*  
          *Date: ${new Date().toISOString().split('T')[0]}*
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üîÑ Sprint Retrospective - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: [
              'sprint-retrospective', 
              'automated', 
              'priority:medium', 
              'type:process-improvement'
            ],
            assignees: ['Dorotel']
          });
      env:
        completion_rate: ${{ steps.sprint_analysis.outputs.completion_rate }}
        completed_issues: ${{ steps.sprint_analysis.outputs.completed_issues }}
        open_issues: ${{ steps.sprint_analysis.outputs.open_issues }}
        
    - name: Update Sprint Labels
      if: github.event.inputs.sprint_action == 'start-new-sprint'
      uses: actions/github-script@v7
      with:
        script: |
          // Get all issues with current sprint label
          const { data: currentSprintIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'sprint:current',
            state: 'open'
          });
          
          // Move current sprint issues to previous sprint
          for (const issue of currentSprintIssues) {
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              name: 'sprint:current'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ['sprint:previous']
            });
          }
          
          console.log(`Moved ${currentSprintIssues.length} issues from current to previous sprint`);
          
    - name: Generate Sprint Report
      id: report
      run: |
        cat > sprint_report.md << EOF
        # Sprint Planning Report - $(date '+%Y-%m-%d')
        
        ## Sprint Configuration
        - **Sprint Number**: ${{ steps.sprint_dates.outputs.sprint_number }}
        - **Duration**: ${{ steps.sprint_dates.outputs.sprint_duration }} week(s)
        - **Start Date**: ${{ steps.sprint_dates.outputs.sprint_start }}
        - **End Date**: ${{ steps.sprint_dates.outputs.sprint_end }}
        
        ## Current Status
        - **Open Issues**: ${{ steps.sprint_analysis.outputs.open_issues }}
        - **Completed Issues**: ${{ steps.sprint_analysis.outputs.completed_issues }}
        - **In Progress**: ${{ steps.sprint_analysis.outputs.in_progress_issues }}
        - **Blocked**: ${{ steps.sprint_analysis.outputs.blocked_issues }}
        - **Completion Rate**: ${{ steps.sprint_analysis.outputs.completion_rate }}%
        
        ## Actions Taken
        - ‚úÖ Sprint planning issue created
        - ‚úÖ Sprint dates calculated
        - ‚úÖ Previous sprint analysis completed
        - ‚úÖ Sprint labels updated (if applicable)
        
        ## Next Steps
        1. Review and prioritize backlog items
        2. Assign story points to sprint items
        3. Set up sprint board and tracking
        4. Communicate sprint goals to stakeholders
        
        Generated by MTM Sprint Automation
        EOF
        
    - name: Upload Sprint Report
      uses: actions/upload-artifact@v4
      with:
        name: sprint-report-${{ steps.sprint_dates.outputs.sprint_number }}
        path: sprint_report.md
        retention-days: 90
        
    - name: Summary
      run: |
        echo "=== Sprint Planning Automation Summary ==="
        echo "Action: ${{ github.event.inputs.sprint_action || 'start-new-sprint' }}"
        echo "Sprint Number: ${{ steps.sprint_dates.outputs.sprint_number }}"
        echo "Sprint Duration: ${{ steps.sprint_dates.outputs.sprint_duration }} week(s)"
        echo "Start Date: ${{ steps.sprint_dates.outputs.sprint_start }}"
        echo "End Date: ${{ steps.sprint_dates.outputs.sprint_end }}"
        echo "Completion Rate: ${{ steps.sprint_analysis.outputs.completion_rate }}%"
        echo "Sprint planning issue created and configured"
