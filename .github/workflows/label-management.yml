name: Label Management System
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'sync'
        type: choice
        options:
        - sync
        - create
        - audit
  push:
    branches: [ main, master ]
    paths: 
      - '.github/workflows/label-management.yml'
  schedule:
    # Run monthly on the 1st at 3 AM UTC to ensure labels are up to date
    - cron: '0 3 1 * *'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  manage-labels:
    name: Manage Repository Labels
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Define MTM Label Schema
      id: define-labels
      run: |
        # Create comprehensive MTM label definitions
        cat > labels.json << 'EOF'
        [
          {
            "name": "bug",
            "color": "d73a4a",
            "description": "Something isn't working"
          },
          {
            "name": "feature",
            "color": "a2eeef",
            "description": "New feature or request"
          },
          {
            "name": "enhancement",
            "color": "84b6eb",
            "description": "Enhancement to existing functionality"
          },
          {
            "name": "documentation",
            "color": "0075ca",
            "description": "Improvements or additions to documentation"
          },
          {
            "name": "component:ui",
            "color": "8c5aa8",
            "description": "User interface components and AXAML"
          },
          {
            "name": "component:viewmodel",
            "color": "6a1b99",
            "description": "ViewModels and business logic"
          },
          {
            "name": "component:service",
            "color": "4c2a85",
            "description": "Services and infrastructure"
          },
          {
            "name": "component:model",
            "color": "3e1f6b",
            "description": "Models and data structures"
          },
          {
            "name": "component:database",
            "color": "2a1450",
            "description": "Database and stored procedures"
          },
          {
            "name": "severity:critical",
            "color": "b60205",
            "description": "Critical severity - immediate attention required"
          },
          {
            "name": "severity:high",
            "color": "d93f0b",
            "description": "High severity - urgent fix needed"
          },
          {
            "name": "severity:medium",
            "color": "fbca04",
            "description": "Medium severity - important but not urgent"
          },
          {
            "name": "severity:low",
            "color": "0e8a16",
            "description": "Low severity - minor issue"
          },
          {
            "name": "priority:critical",
            "color": "b60205",
            "description": "Critical priority - must have"
          },
          {
            "name": "priority:high",
            "color": "d93f0b",
            "description": "High priority - should have"
          },
          {
            "name": "priority:medium",
            "color": "fbca04",
            "description": "Medium priority - could have"
          },
          {
            "name": "priority:low",
            "color": "0e8a16",
            "description": "Low priority - won't have this iteration"
          },
          {
            "name": "size:XS",
            "color": "c2e0c6",
            "description": "Extra small PR - under 50 lines changed"
          },
          {
            "name": "size:S",
            "color": "bfd4f2",
            "description": "Small PR - 50-200 lines changed"
          },
          {
            "name": "size:M",
            "color": "d4c5f9",
            "description": "Medium PR - 200-500 lines changed"
          },
          {
            "name": "size:L",
            "color": "f9d0c4",
            "description": "Large PR - 500-1000 lines changed"
          },
          {
            "name": "size:XL",
            "color": "f2cccc",
            "description": "Extra large PR - over 1000 lines changed"
          },
          {
            "name": "type:performance",
            "color": "1d76db",
            "description": "Performance improvements"
          },
          {
            "name": "type:ux",
            "color": "5319e7",
            "description": "User experience improvements"
          },
          {
            "name": "type:reliability",
            "color": "0052cc",
            "description": "Reliability and error handling"
          },
          {
            "name": "type:security",
            "color": "b60205",
            "description": "Security-related changes"
          },
          {
            "name": "needs-investigation",
            "color": "fbca04",
            "description": "Requires investigation before resolution"
          },
          {
            "name": "needs-changes",
            "color": "e99695",
            "description": "Changes requested during review"
          },
          {
            "name": "ready-to-merge",
            "color": "0e8a16",
            "description": "PR is approved and ready for merge"
          },
          {
            "name": "needs-template-completion",
            "color": "f9d0c4",
            "description": "Template completion required"
          },
          {
            "name": "hotfix",
            "color": "b60205",
            "description": "Emergency hotfix"
          },
          {
            "name": "refactoring",
            "color": "fef2c0",
            "description": "Code refactoring"
          },
          {
            "name": "testing",
            "color": "c5def5",
            "description": "Testing improvements or test-only changes"
          },
          {
            "name": "build",
            "color": "1d76db",
            "description": "Build system and dependency changes"
          },
          {
            "name": "stale",
            "color": "cccccc",
            "description": "Issue or PR has been inactive"
          },
          {
            "name": "docs:github-instructions",
            "color": "0075ca",
            "description": "GitHub instructions documentation"
          },
          {
            "name": "docs:architecture",
            "color": "1d76db",
            "description": "Architecture documentation"
          },
          {
            "name": "docs:developer-guide",
            "color": "5319e7",
            "description": "Developer guidelines documentation"
          }
        ]
        EOF
        
        echo "Labels defined in labels.json"
        cat labels.json | jq '.[] | .name' | wc -l | xargs echo "Total labels:"
        
    - name: Sync Repository Labels
      if: github.event.inputs.action == 'sync' || github.event.inputs.action == '' || github.event_name == 'schedule' || github.event_name == 'push'
      run: |
        echo "=== Syncing Repository Labels ==="
        
        # Create or update labels from the schema
        while IFS= read -r label_data; do
          name=$(echo "$label_data" | jq -r '.name')
          color=$(echo "$label_data" | jq -r '.color')
          description=$(echo "$label_data" | jq -r '.description')
          
          echo "Processing label: $name"
          
          # Try to create the label, update if it already exists
          if gh label create "$name" --color "$color" --description "$description" 2>/dev/null; then
            echo "✅ Created label: $name"
          else
            # Label might exist, try to update it
            if gh label edit "$name" --color "$color" --description "$description" 2>/dev/null; then
              echo "✅ Updated label: $name"
            else
              echo "⚠️  Could not create or update label: $name"
            fi
          fi
          
        done < <(cat labels.json | jq -c '.[]')
        
    - name: Audit Current Labels
      if: github.event.inputs.action == 'audit'
      run: |
        echo "=== Repository Label Audit ==="
        
        echo "Current repository labels:"
        gh label list --json name,description,color | jq -r '.[] | "\(.name) - \(.description)"'
        
        echo ""
        echo "Labels defined in schema:"
        cat labels.json | jq -r '.[] | "\(.name) - \(.description)"'
        
        echo ""
        echo "=== Label Coverage Analysis ==="
        
        # Check for labels in schema not in repo
        echo "Missing labels (in schema but not in repo):"
        while IFS= read -r schema_label; do
          if ! gh label list --json name | jq -r '.[] | .name' | grep -q "^$schema_label$"; then
            echo "❌ Missing: $schema_label"
          fi
        done < <(cat labels.json | jq -r '.[] | .name')
        
        # Check for labels in repo not in schema
        echo ""
        echo "Extra labels (in repo but not in schema):"
        while IFS= read -r repo_label; do
          if ! cat labels.json | jq -r '.[] | .name' | grep -q "^$repo_label$"; then
            echo "➕ Extra: $repo_label"
          fi
        done < <(gh label list --json name | jq -r '.[] | .name')
        
    - name: Generate Label Documentation
      run: |
        echo "=== Generating Label Documentation ==="
        
        cat > LABELS.md << 'EOF'
        # MTM Repository Label System
        
        This document describes the comprehensive label system used in the MTM WIP Application repository for issue and pull request organization.
        
        ## Label Categories
        
        ### Component Labels
        These labels categorize issues and PRs by the affected component:
        
        EOF
        
        # Add component labels
        cat labels.json | jq -r '.[] | select(.name | startswith("component:")) | "- **\(.name)**: \(.description)"' >> LABELS.md
        
        cat >> LABELS.md << 'EOF'
        
        ### Severity Labels
        Used for bugs and critical issues:
        
        EOF
        
        # Add severity labels
        cat labels.json | jq -r '.[] | select(.name | startswith("severity:")) | "- **\(.name)**: \(.description)"' >> LABELS.md
        
        cat >> LABELS.md << 'EOF'
        
        ### Priority Labels
        Used for feature prioritization:
        
        EOF
        
        # Add priority labels
        cat labels.json | jq -r '.[] | select(.name | startswith("priority:")) | "- **\(.name)**: \(.description)"' >> LABELS.md
        
        cat >> LABELS.md << 'EOF'
        
        ### Size Labels
        Automatically applied to PRs based on lines changed:
        
        EOF
        
        # Add size labels
        cat labels.json | jq -r '.[] | select(.name | startswith("size:")) | "- **\(.name)**: \(.description)"' >> LABELS.md
        
        cat >> LABELS.md << 'EOF'
        
        ### Type Labels
        Categorize the type of change or improvement:
        
        EOF
        
        # Add type labels
        cat labels.json | jq -r '.[] | select(.name | startswith("type:")) | "- **\(.name)**: \(.description)"' >> LABELS.md
        
        cat >> LABELS.md << 'EOF'
        
        ### Documentation Labels
        For documentation-related changes:
        
        EOF
        
        # Add docs labels
        cat labels.json | jq -r '.[] | select(.name | startswith("docs:")) | "- **\(.name)**: \(.description)"' >> LABELS.md
        
        cat >> LABELS.md << 'EOF'
        
        ### Workflow Labels
        For managing issue and PR workflow:
        
        EOF
        
        # Add workflow labels (remaining ones)
        cat labels.json | jq -r '.[] | select(.name | startswith("component:") | not) | select(.name | startswith("severity:") | not) | select(.name | startswith("priority:") | not) | select(.name | startswith("size:") | not) | select(.name | startswith("type:") | not) | select(.name | startswith("docs:") | not) | "- **\(.name)**: \(.description)"' >> LABELS.md
        
        cat >> LABELS.md << 'EOF'
        
        ## Automation
        
        Labels are automatically applied by GitHub Actions based on:
        - Issue and PR content analysis
        - File changes in PRs
        - PR size calculations
        - Template compliance checking
        
        ## Label Management
        
        This label system is managed through the `label-management.yml` GitHub Action workflow, which:
        - Syncs labels monthly
        - Ensures consistency across the repository
        - Provides audit capabilities
        - Generates this documentation
        
        ---
        
        **Last Updated**: $(date +'%B %d, %Y')
        **Managed by**: GitHub Actions Label Management System
        EOF
        
        echo "Generated LABELS.md documentation"
        
        # Upload as artifact
        echo "label-count=$(cat labels.json | jq '. | length')" >> $GITHUB_OUTPUT
        
    - name: Upload Label Documentation
      uses: actions/upload-artifact@v4
      with:
        name: label-documentation
        path: LABELS.md
        retention-days: 90
        
    - name: Summary
      run: |
        echo "=== Label Management Summary ==="
        echo "Action performed: ${{ github.event.inputs.action || 'sync' }}"
        echo "Labels processed: $(cat labels.json | jq '. | length')"
        echo "Documentation generated: LABELS.md"
        echo ""
        echo "Label management completed successfully! 🏷️"