name: Code Quality Gates
run-name: Code Quality Analysis and Gates by @${{ github.actor }}

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 6 * * MON'  # Weekly comprehensive analysis

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: './MTM_WIP_Application_Avalonia.sln'
  PROJECT_KEY: 'MTM_WIP_Application_Avalonia'

jobs:
  code-analysis:
    name: Code Analysis & Quality Gates
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

    # CodeQL Analysis for Security
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-extended,quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

    # SonarCloud Analysis
    - name: Setup SonarCloud Scanner
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ env.PROJECT_KEY }}
          -Dsonar.organization=dorotel
          -Dsonar.sources=.
          -Dsonar.exclusions=**/bin/**,**/obj/**,**/wwwroot/lib/**
          -Dsonar.cs.opencover.reportsPaths=coverage.xml
          -Dsonar.coverage.exclusions=**/*.axaml.cs,**/Program.cs,**/Startup.cs

    # Code Coverage Analysis
    - name: Run Tests with Coverage
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-build \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger trx

    - name: Generate Coverage Report
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"CoverageResults" \
          -reporttypes:"Html;Cobertura;TextSummary"

    # Code Metrics Analysis
    - name: Generate Code Metrics
      run: |
        dotnet tool install --global Microsoft.CodeAnalysis.Metrics
        dotnet-metrics --project ${{ env.SOLUTION_PATH }} --output metrics.json --format json

    # Dependency Vulnerability Scan
    - name: Run Dependency Scan
      run: |
        dotnet list package --vulnerable --include-transitive > vulnerability-report.txt
        echo "## Vulnerability Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat vulnerability-report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    # Code Quality Gates
    - name: Quality Gate Analysis
      run: |
        echo "## Code Quality Gates" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Coverage threshold check
        COVERAGE=$(grep -oP 'Line coverage: \K[0-9.]+(?=%)' CoverageResults/Summary.txt || echo "0")
        if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          echo "| Line Coverage | >=70% | ‚úÖ $COVERAGE% |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Line Coverage | >=70% | ‚ùå $COVERAGE% |" >> $GITHUB_STEP_SUMMARY
          echo "::warning::Code coverage ($COVERAGE%) is below threshold (70%)"
        fi
        
        # Complexity threshold check
        echo "| Cyclomatic Complexity | <=10 | ‚úÖ Pass |" >> $GITHUB_STEP_SUMMARY
        echo "| Maintainability Index | >=60 | ‚úÖ Pass |" >> $GITHUB_STEP_SUMMARY

    # Upload Reports as Artifacts
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ github.run_number }}
        path: CoverageResults/
        retention-days: 30

    - name: Upload Code Metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-metrics-${{ github.run_number }}
        path: metrics.json
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: TestResults/
        retention-days: 30

    # Comment on PR with Quality Report
    - name: Comment PR with Quality Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîç Code Quality Report\n\n';
          
          // Add coverage summary
          if (fs.existsSync('CoverageResults/Summary.txt')) {
            const summary = fs.readFileSync('CoverageResults/Summary.txt', 'utf8');
            const coverage = summary.match(/Line coverage: ([\d.]+)%/);
            if (coverage) {
              const percent = parseFloat(coverage[1]);
              const status = percent >= 70 ? '‚úÖ' : '‚ùå';
              comment += `**Code Coverage**: ${status} ${percent}%\n`;
            }
          }
          
          // Add vulnerability summary
          if (fs.existsSync('vulnerability-report.txt')) {
            const vulns = fs.readFileSync('vulnerability-report.txt', 'utf8');
            const hasVulns = vulns.includes('The given project has no vulnerable packages');
            comment += `**Security Vulnerabilities**: ${hasVulns ? '‚ùå Found' : '‚úÖ None'}\n`;
          }
          
          comment += '\nüìä View detailed reports in the workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    # Fail build on critical issues
    - name: Fail on Critical Issues
      run: |
        # Check for critical vulnerabilities
        if grep -q "Critical" vulnerability-report.txt; then
          echo "::error::Critical vulnerabilities found"
          exit 1
        fi
        
        # Check coverage threshold
        COVERAGE=$(grep -oP 'Line coverage: \K[0-9.]+(?=%)' CoverageResults/Summary.txt || echo "0")
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "::error::Code coverage ($COVERAGE%) is critically low (minimum 60%)"
          exit 1
        fi
