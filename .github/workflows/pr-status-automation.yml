name: Automated PR Status Updates

on:
  pull_request:
    types: [opened, closed, synchronize, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

jobs:
  update-pr-status:
    name: Update PR Status and Labels
    runs-on: ubuntu-latest
    if: github.event.pull_request || (github.event.issue.pull_request && github.event.comment)
    
    permissions:
      pull-requests: write
      issues: write
      contents: read
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Analyze PR Changes
      id: analyze_pr
      if: github.event.pull_request
      run: |
        # Analyze the types of files changed
        FILES_CHANGED=$(git diff --name-only origin/master...HEAD | wc -l)
        CS_FILES=$(git diff --name-only origin/master...HEAD | grep -c "\.cs$" || echo 0)
        AXAML_FILES=$(git diff --name-only origin/master...HEAD | grep -c "\.axaml$" || echo 0)
        SQL_FILES=$(git diff --name-only origin/master...HEAD | grep -c "\.sql$" || echo 0)
        WORKFLOW_FILES=$(git diff --name-only origin/master...HEAD | grep -c "\.yml$\|\.yaml$" || echo 0)
        DOC_FILES=$(git diff --name-only origin/master...HEAD | grep -c "\.md$" || echo 0)
        
        # Calculate PR complexity
        LINES_ADDED=$(git diff --shortstat origin/master...HEAD | grep -oE '[0-9]+ insertions' | grep -oE '[0-9]+' || echo 0)
        LINES_DELETED=$(git diff --shortstat origin/master...HEAD | grep -oE '[0-9]+ deletions' | grep -oE '[0-9]+' || echo 0)
        
        echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
        echo "cs_files=$CS_FILES" >> $GITHUB_OUTPUT
        echo "axaml_files=$AXAML_FILES" >> $GITHUB_OUTPUT
        echo "sql_files=$SQL_FILES" >> $GITHUB_OUTPUT
        echo "workflow_files=$WORKFLOW_FILES" >> $GITHUB_OUTPUT
        echo "doc_files=$DOC_FILES" >> $GITHUB_OUTPUT
        echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
        echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT
        
        # Determine PR size
        TOTAL_CHANGES=$((LINES_ADDED + LINES_DELETED))
        if [ $TOTAL_CHANGES -lt 50 ]; then
          echo "pr_size=small" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -lt 200 ]; then
          echo "pr_size=medium" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -lt 500 ]; then
          echo "pr_size=large" >> $GITHUB_OUTPUT
        else
          echo "pr_size=xl" >> $GITHUB_OUTPUT
        fi
        
        # Determine change types
        CHANGE_TYPES=""
        if [ $CS_FILES -gt 0 ]; then CHANGE_TYPES="$CHANGE_TYPES,backend"; fi
        if [ $AXAML_FILES -gt 0 ]; then CHANGE_TYPES="$CHANGE_TYPES,ui"; fi
        if [ $SQL_FILES -gt 0 ]; then CHANGE_TYPES="$CHANGE_TYPES,database"; fi
        if [ $WORKFLOW_FILES -gt 0 ]; then CHANGE_TYPES="$CHANGE_TYPES,automation"; fi
        if [ $DOC_FILES -gt 0 ]; then CHANGE_TYPES="$CHANGE_TYPES,documentation"; fi
        
        echo "change_types=${CHANGE_TYPES#,}" >> $GITHUB_OUTPUT
        
    - name: Add PR Labels Based on Changes
      if: github.event.action == 'opened' || github.event.action == 'synchronize'
      uses: actions/github-script@v7
      with:
        script: |
          const { change_types, pr_size, cs_files, axaml_files, sql_files } = process.env;
          
          let labels = [];
          
          // Add size label
          labels.push(`size:${pr_size}`);
          
          // Add change type labels
          if (change_types) {
            const types = change_types.split(',');
            types.forEach(type => {
              labels.push(`type:${type}`);
            });
          }
          
          // Add complexity indicators
          if (parseInt(cs_files) > 10) {
            labels.push('complexity:high');
          } else if (parseInt(cs_files) > 5) {
            labels.push('complexity:medium');
          } else {
            labels.push('complexity:low');
          }
          
          // Add special labels for database changes
          if (parseInt(sql_files) > 0) {
            labels.push('requires:database-review');
          }
          
          // Add UI changes label
          if (parseInt(axaml_files) > 0) {
            labels.push('requires:ui-review');
          }
          
          // Apply labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }
      env:
        change_types: ${{ steps.analyze_pr.outputs.change_types }}
        pr_size: ${{ steps.analyze_pr.outputs.pr_size }}
        cs_files: ${{ steps.analyze_pr.outputs.cs_files }}
        axaml_files: ${{ steps.analyze_pr.outputs.axaml_files }}
        sql_files: ${{ steps.analyze_pr.outputs.sql_files }}
        
    - name: Update PR Description with Analysis
      if: github.event.action == 'opened'
      uses: actions/github-script@v7
      with:
        script: |
          const { files_changed, lines_added, lines_deleted, change_types, pr_size } = process.env;
          
          const analysisSection = `
          
          ## ü§ñ Automated Analysis
          
          | Metric | Value |
          |--------|-------|
          | **Files Changed** | ${files_changed} |
          | **Lines Added** | ${lines_added} |
          | **Lines Deleted** | ${lines_deleted} |
          | **PR Size** | ${pr_size} |
          | **Change Types** | ${change_types || 'general'} |
          
          ### Review Recommendations
          ${pr_size === 'xl' ? '‚ö†Ô∏è **Large PR**: Consider breaking into smaller PRs for easier review' : ''}
          ${change_types && change_types.includes('database') ? 'üóÑÔ∏è **Database Changes**: Requires careful review of schema changes and stored procedures' : ''}
          ${change_types && change_types.includes('ui') ? 'üé® **UI Changes**: Verify AXAML syntax and MTM design system compliance' : ''}
          ${change_types && change_types.includes('backend') ? '‚öôÔ∏è **Backend Changes**: Review MVVM patterns and service implementations' : ''}
          
          ---
          *Analysis generated by MTM Automation System*
          `;
          
          // Get current PR body
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          // Update PR description with analysis
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            body: pullRequest.body + analysisSection
          });
      env:
        files_changed: ${{ steps.analyze_pr.outputs.files_changed }}
        lines_added: ${{ steps.analyze_pr.outputs.lines_added }}
        lines_deleted: ${{ steps.analyze_pr.outputs.lines_deleted }}
        change_types: ${{ steps.analyze_pr.outputs.change_types }}
        pr_size: ${{ steps.analyze_pr.outputs.pr_size }}
        
    - name: Add Review Requests Based on Changes
      if: github.event.action == 'opened' || github.event.action == 'ready_for_review'
      uses: actions/github-script@v7
      with:
        script: |
          const { change_types, pr_size, sql_files } = process.env;
          
          let reviewers = [];
          
          // Add database expert for SQL changes
          if (parseInt(sql_files) > 0) {
            reviewers.push('Dorotel'); // Repository owner for database changes
          }
          
          // Add additional reviewers for large PRs
          if (pr_size === 'xl' || pr_size === 'large') {
            reviewers.push('Dorotel'); // Ensure owner reviews large changes
          }
          
          // Request reviews if reviewers identified
          if (reviewers.length > 0) {
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: [...new Set(reviewers)] // Remove duplicates
              });
            } catch (error) {
              console.log('Could not request reviews:', error.message);
            }
          }
      env:
        change_types: ${{ steps.analyze_pr.outputs.change_types }}
        pr_size: ${{ steps.analyze_pr.outputs.pr_size }}
        sql_files: ${{ steps.analyze_pr.outputs.sql_files }}
        
    - name: Update Status on PR Events
      if: github.event.action != 'opened'
      uses: actions/github-script@v7
      with:
        script: |
          const action = context.payload.action;
          let comment = '';
          let labels = [];
          
          switch (action) {
            case 'ready_for_review':
              comment = 'üîÑ **Status Update**: PR is now ready for review!\n\n' +
                       '**Next Steps**:\n' +
                       '- [ ] Code review by maintainers\n' +
                       '- [ ] CI/CD pipeline validation\n' +
                       '- [ ] Testing verification\n\n' +
                       '*Automated status update by MTM System*';
              labels = ['status:ready-for-review'];
              break;
              
            case 'converted_to_draft':
              comment = 'üìù **Status Update**: PR converted to draft\n\n' +
                       '**Current State**: Work in progress\n' +
                       '**Action Required**: Convert back to ready when complete\n\n' +
                       '*Automated status update by MTM System*';
              labels = ['status:draft', 'status:work-in-progress'];
              break;
              
            case 'closed':
              const merged = context.payload.pull_request.merged;
              if (merged) {
                comment = '‚úÖ **Status Update**: PR successfully merged!\n\n' +
                         '**Completion Summary**:\n' +
                         '- ‚úÖ Code review completed\n' +
                         '- ‚úÖ CI/CD pipeline passed\n' +
                         '- ‚úÖ Changes integrated to main branch\n\n' +
                         '**Post-Merge Actions**:\n' +
                         '- [ ] Monitor deployment pipeline\n' +
                         '- [ ] Verify changes in staging environment\n' +
                         '- [ ] Update related documentation\n\n' +
                         '*Automated status update by MTM System*';
                labels = ['status:merged', 'status:completed'];
              } else {
                comment = '‚ùå **Status Update**: PR closed without merging\n\n' +
                         '**Reason**: Changes not integrated\n' +
                         '**Next Steps**: Review feedback and create new PR if needed\n\n' +
                         '*Automated status update by MTM System*';
                labels = ['status:closed', 'status:not-merged'];
              }
              break;
          }
          
          // Add comment if generated
          if (comment) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
          
          // Add labels if any
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }
          
    - name: React to Review Comments
      if: github.event.review || (github.event.comment && github.event.issue.pull_request)
      uses: actions/github-script@v7
      with:
        script: |
          let reactionEmoji = '';
          let labels = [];
          
          if (github.event.review) {
            switch (github.event.review.state) {
              case 'approved':
                reactionEmoji = '+1';
                labels = ['status:approved'];
                break;
              case 'changes_requested':
                reactionEmoji = 'eyes';
                labels = ['status:changes-requested'];
                break;
              case 'commented':
                reactionEmoji = 'heart';
                break;
            }
            
            // React to the review
            if (reactionEmoji) {
              try {
                await github.rest.reactions.createForPullRequestReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  review_id: github.event.review.id,
                  content: reactionEmoji
                });
              } catch (error) {
                console.log('Could not add reaction:', error.message);
              }
            }
          } else if (github.event.comment && github.event.comment.body.toLowerCase().includes('lgtm')) {
            reactionEmoji = '+1';
            labels = ['status:looks-good'];
          }
          
          // Add labels for review states
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }
          
    - name: Summary
      run: |
        echo "=== PR Status Update Summary ==="
        echo "Event: ${{ github.event_name }}"
        echo "Action: ${{ github.event.action }}"
        echo "PR Number: ${{ github.event.number || github.event.pull_request.number }}"
        echo "Status updates and labels applied based on PR lifecycle"
