name: "Create Testing Framework & Comprehensive Test Files"
description: "Enhance existing functionality in the MTM application with improvements or optimizations"
title: "[TESTING] Create Testing Framework & Comprehensive Test Files"
labels: ["testing", "improvement"]
projects: ["MTM-Development"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        ## üèóÔ∏è Comprehensive Testing Infrastructure Implementation
        
        **Phase 2** of the comprehensive testing infrastructure implementation for MTM WIP Application. This epic focuses on creating actual test files using the comprehensive documentation and agent-driven templates created in Phase 1 (PR #76).
        
        ### ‚úÖ Prerequisites Completed (Phase 1)
        - 6 comprehensive instruction files in `.github/instructions/`
        - 6 detailed agent prompt templates in `.github/copilot/prompts/`
        - Cross-platform testing guides and validation scripts
        - Updated project documentation with testing infrastructure references

  - type: input
    id: epic_title
    attributes:
      label: "Epic Title Override"
      description: "Override the default title if needed"
      placeholder: "Leave blank to use default: Comprehensive Testing Infrastructure - Phase 2: Test File Creation"
    validations:
      required: false

  - type: dropdown
    id: epic_priority
    attributes:
      label: "Epic Priority"
      description: "Business priority level for this testing Epic"
      options:
        - "Critical - Foundation/Infrastructure"
        - "High - Core Features"
        - "Medium - Enhancements"
      default: 0
    validations:
      required: true

  - type: checkboxes
    id: testing_tiers
    attributes:
      label: "Testing Tiers to Implement"
      description: "Select all testing tiers to be included in this Epic"
      options:
        - label: "**Tier 1: Unit Testing** - ViewModels & Services (MVVM Community Toolkit + Moq)"
          required: false
        - label: "**Tier 2: Integration Testing** - Multi-service workflows with real database connections"
          required: false
        - label: "**Tier 3: UI Automation Testing** - Avalonia.Headless UI testing framework"
          required: false
        - label: "**Tier 4: Database Testing** - MySQL stored procedure testing (45+ procedures)"
          required: false
        - label: "**Tier 5: Performance Testing** - NBomber load testing and performance validation"
          required: false
        - label: "**Cross-Platform Testing** - Windows, macOS, Linux, Android compatibility"
          required: false

  - type: textarea
    id: business_context
    attributes:
      label: "Business Context & Problem Statement"
      description: "Manufacturing context and testing needs"
      value: |
        **Problem Statement:**
        The MTM WIP Application currently lacks comprehensive testing coverage for critical manufacturing workflows, database operations, and cross-platform compatibility.

        **Business Impact:**
        - Manufacturing floor operations risk downtime due to untested edge cases
        - Database integrity issues could cause inventory discrepancies
        - Cross-platform deployment risks due to platform-specific compatibility issues
        - Service integration failures could impact manufacturing workflow efficiency

        **Success Vision:**
        When complete, the MTM application will have:
        - 95%+ code coverage on all critical manufacturing workflows
        - Automated testing preventing regression in inventory management
        - Cross-platform validation ensuring consistent behavior on Windows, macOS, Linux, Android
        - Performance validation ensuring manufacturing floor response time requirements
    validations:
      required: true

  - type: textarea
    id: scope_boundaries
    attributes:
      label: "Epic Scope & Test Coverage"
      description: "Define comprehensive testing scope and boundaries"
      value: |
        **In Scope:**
        - 20+ ViewModels comprehensive unit testing with MVVM Community Toolkit patterns
        - 15+ Services unit and integration testing with business logic validation
        - 7+ major Views UI automation testing with Avalonia.Headless
        - 45+ MySQL stored procedures performance and integrity testing
        - Manufacturing workflows (inventory, transactions, QuickButtons, master data)
        - Cross-platform compatibility testing (Windows, macOS, Linux, Android)
        - CI/CD integration with automated test execution
        - Performance testing with NBomber framework

        **Out of Scope:**
        - Legacy system testing or migration testing
        - Third-party service integration testing
        - Hardware-specific testing (barcode scanners, printers)
        - Load testing beyond manufacturing floor requirements
    validations:
      required: true

  - type: textarea
    id: success_metrics
    attributes:
      label: "Success Metrics & Testing KPIs"
      description: "Measurable success criteria for testing implementation"
      value: |
        **Primary KPIs:**
        - Code Coverage: 95%+ on ViewModels and Services
        - Test Count: 500+ comprehensive tests across all tiers
        - Test Execution Time: < 10 minutes total for full test suite
        - Cross-Platform Pass Rate: 100% on Windows, macOS, Linux

        **Secondary KPIs:**
        - Database Test Coverage: All 45+ stored procedures tested
        - Performance Validation: All manufacturing workflows meet <200ms response time
        - UI Test Coverage: All major user interaction scenarios automated
        - Error Scenario Coverage: Comprehensive edge case and error handling testing

        **Quality Metrics:**
        - Zero false positive test failures
        - Test maintenance effort < 10% of development time
        - Automated regression detection preventing production issues
    validations:
      required: true

  - type: textarea
    id: features_breakdown
    attributes:
      label: "Major Testing Features & Components"
      description: "List the major testing features this Epic will contain"
      value: |
        1. **Unit Test Suite** - Comprehensive ViewModel and Service testing
           - InventoryViewModel, QuickButtonsViewModel, TransactionViewModel testing
           - Service layer testing with dependency injection validation
           - MVVM Community Toolkit pattern testing ([ObservableProperty], [RelayCommand])

        2. **Integration Test Suite** - Multi-service workflow validation
           - Database integration testing with real connections
           - Service orchestration and communication testing
           - Manufacturing workflow end-to-end validation

        3. **UI Automation Suite** - Avalonia.Headless framework implementation
           - Form submission and validation testing
           - Navigation and state management testing
           - Data binding and user interaction validation

        4. **Database Test Suite** - MySQL stored procedure comprehensive testing
           - All 45+ stored procedures performance validation
           - Data integrity and transaction consistency testing
           - Concurrent access and connection pooling testing

        5. **Performance Test Suite** - NBomber load testing implementation
           - Manufacturing workflow load testing
           - Memory leak detection and resource monitoring
           - Throughput and response time validation

        6. **Cross-Platform Test Suite** - Multi-platform compatibility validation
           - Windows, macOS, Linux, Android platform testing
           - File system and path handling validation
           - Platform-specific feature testing
    validations:
      required: true

  - type: textarea
    id: technical_considerations
    attributes:
      label: "Technical Architecture & Testing Framework"
      description: "Key technical aspects and testing framework decisions"
      value: |
        **Testing Technology Stack:**
        - NUnit 4.1.0 for comprehensive test framework
        - Moq 4.20.70 for service mocking and dependency injection testing
        - Avalonia.Headless 11.3.4 for UI automation testing
        - NBomber for performance and load testing
        - MySQL.Data 9.4.0 for database integration testing

        **Architecture Patterns:**
        - MVVM Community Toolkit testing patterns with source generator attributes
        - Service-oriented testing with dependency injection validation
        - Database testing with stored procedures only (no direct SQL)
        - Cross-platform testing with platform-specific adaptations

        **Key Constraints:**
        - Must follow established MTM architecture patterns
        - All database access via Helper_Database_StoredProcedure.ExecuteDataTableWithStatus()
        - Avalonia AXAML syntax compliance required for UI tests
        - Manufacturing domain context must be maintained in all tests

        **Agent-Driven Implementation:**
        - Use comprehensive instruction files in .github/instructions/
        - Apply detailed prompt templates in .github/copilot/prompts/
        - Follow awesome-copilot patterns for consistent test generation
    validations:
      required: true

  - type: textarea
    id: dependencies
    attributes:
      label: "Dependencies & Prerequisites"
      description: "What must be completed before or alongside this Epic?"
      value: |
        **Completed Dependencies:**
        ‚úÖ Phase 1: Comprehensive documentation structure (PR #76)
        ‚úÖ Instruction files for all testing tiers
        ‚úÖ Agent prompt templates for test generation
        ‚úÖ Cross-platform testing guides and validation scripts

        **Required Dependencies:**
        - Test project structure creation and organization
        - Test database instance setup and configuration
        - GitHub Actions CI/CD pipeline integration
        - Test data fixtures and seeding procedures

        **External Dependencies:**
        - MySQL test database availability
        - Cross-platform build environments (GitHub Actions runners)
        - Agent assistance for test file generation
        - Development environment setup for all target platforms

        **Potential Blockers:**
        - Database schema changes during implementation
        - Breaking changes in Avalonia UI framework
        - Resource constraints for comprehensive test execution
        - Cross-platform environment availability for validation
    validations:
      required: true

  - type: dropdown
    id: estimated_timeline
    attributes:
      label: "Estimated Timeline"
      description: "Expected duration for comprehensive testing implementation"
      options:
        - "8-10 weeks (Comprehensive Implementation)"
        - "10-12 weeks (Full Cross-Platform Validation)"
        - "12+ weeks (Including Performance Optimization)"
      default: 0
    validations:
      required: true

  - type: textarea
    id: acceptance_criteria
    attributes:
      label: "Epic Completion Criteria"
      description: "Comprehensive criteria for Epic completion"
      value: |
        **Core Testing Requirements:**
        - [ ] All ViewModels have comprehensive unit tests with 95%+ coverage
        - [ ] All Services have unit and integration tests with business logic validation
        - [ ] All major Views have UI automation tests with user interaction scenarios
        - [ ] All 45+ stored procedures have performance and integrity tests
        - [ ] Performance testing suite validates manufacturing workflow thresholds
        - [ ] Cross-platform testing ensures functionality on Windows, macOS, Linux, Android

        **Technical Implementation Requirements:**
        - [ ] CI/CD pipeline automatically runs all tests on PR creation
        - [ ] Test execution completes within 10 minutes for full suite
        - [ ] No false positive test failures in automated runs
        - [ ] Test documentation provides clear guidance for maintenance

        **Manufacturing Domain Requirements:**
        - [ ] Inventory management workflows fully tested
        - [ ] Transaction processing and history validation complete
        - [ ] QuickButton execution and error handling validated
        - [ ] Master data management testing (parts, operations, locations, users)
        - [ ] Error logging and monitoring validation implemented

        **Quality Assurance Requirements:**
        - [ ] All tests follow established MTM architecture patterns
        - [ ] Test code reviews completed and approved
        - [ ] Performance baselines established and documented
        - [ ] Cross-platform compatibility validated on physical devices where possible
    validations:
      required: true

  - type: checkboxes
    id: implementation_phases
    attributes:
      label: "Implementation Phase Planning"
      description: "Select implementation phases for this Epic"
      options:
        - label: "**Phase 2A: Foundation** (4-6 weeks) - Unit Tests, Integration Tests, Basic UI Automation"
          required: false
        - label: "**Phase 2B: Advanced Testing** (3-4 weeks) - Database Performance, Load Testing, Cross-Platform"
          required: false
        - label: "**Phase 2C: Infrastructure** (2-3 weeks) - CI/CD Integration, Test Data Management"
          required: false

  - type: checkboxes
    id: epic_checklist
    attributes:
      label: "Epic Preparation Checklist"
      description: "Ensure Epic is ready for agent-driven implementation"
      options:
        - label: "Phase 1 documentation structure completed and reviewed"
          required: false
        - label: "Agent prompt templates validated and ready for use"
          required: false
        - label: "Test project structure planned and documented"
          required: false
        - label: "Cross-platform testing environments identified"
          required: false
        - label: "Performance testing thresholds defined for manufacturing workflows"
          required: false
        - label: "Database testing strategy approved and documented"
          required: false

  - type: textarea
    id: additional_notes
    attributes:
      label: "Additional Implementation Notes"
      description: "Any other relevant information for this testing Epic"
      value: |
        **Agent-Driven Implementation Strategy:**
        - Use comprehensive documentation from .github/instructions/ for context
        - Apply prompt templates from .github/copilot/prompts/ for test generation
        - Follow incremental implementation with validation at each step
        - Maintain consistency with MTM architecture patterns throughout

        **Cross-Platform Considerations:**
        - Windows: Primary development and manufacturing floor platform
        - macOS: Office management and reporting systems
        - Linux: Manufacturing automation and server systems
        - Android: Mobile manufacturing operations and warehouse management

        **Related Documentation:**
        - Testing Standards: .github/instructions/testing-standards.instructions.md
        - Cross-Platform Guide: .github/docs/README-CrossPlatformTesting.md
        - Validation Script: .github/scripts/Test-CrossPlatformCompatibility.ps1
    validations:
      required: false

## üìã Epic Overview

**Phase 2** of the comprehensive testing infrastructure implementation for MTM WIP Application. This epic focuses on creating actual test files using the comprehensive documentation and agent-driven templates created in Phase 1 (PR #76).

### üéØ Epic Objectives

- [ ] **Unit Test Suite**: Create comprehensive unit tests for all ViewModels and Services using MVVM Community Toolkit patterns
- [ ] **Integration Test Suite**: Implement multi-service workflow testing with real database connections
- [ ] **UI Automation Suite**: Build Avalonia.Headless UI testing framework for all major views
- [ ] **Database Test Suite**: Create MySQL stored procedure testing covering all 45+ procedures
- [ ] **Performance Test Suite**: Implement NBomber load testing and performance validation
- [ ] **Cross-Platform Test Suite**: Ensure functionality across Windows, macOS, Linux, and Android

## üìö Prerequisites (Completed in Phase 1)

‚úÖ **Documentation Structure Created**:
- 6 comprehensive instruction files in `.github/instructions/`
- 6 detailed agent prompt templates in `.github/copilot/prompts/`
- Cross-platform testing guides and validation scripts
- Updated project documentation with testing infrastructure references

## üéØ Epic Scope

### **Core Testing Coverage Requirements**

#### üîß Unit Testing (Tier 1)
- **Target**: 20+ ViewModels, 15+ Services
- **Framework**: NUnit 4.1.0 + Moq 4.20.70
- **Pattern**: MVVM Community Toolkit with `[ObservableProperty]` and `[RelayCommand]` testing
- **Coverage Goal**: 95%+ code coverage on business logic

#### üîó Integration Testing (Tier 2)
- **Target**: Multi-service workflows, database operations
- **Framework**: NUnit + Real database connections
- **Scope**: Manufacturing workflows, transaction processing, master data management
- **Focus**: Service orchestration and data consistency

#### üé® UI Automation Testing (Tier 3)
- **Target**: 7+ major views (MainView, InventoryTabView, QuickButtonsView, etc.)
- **Framework**: Avalonia.Headless 11.3.4
- **Scope**: Data binding validation, user interactions, responsive behavior
- **Coverage**: Form submission, navigation, theme switching

#### üóÑÔ∏è Database Testing (Tier 4)
- **Target**: 45+ MySQL stored procedures
- **Framework**: NUnit + MySQL.Data 9.4.0
- **Scope**: Data integrity, performance validation, concurrent access testing
- **Focus**: Transaction consistency and performance thresholds

#### ‚ö° Performance Testing (Tier 5)
- **Target**: Critical manufacturing workflows
- **Framework**: NBomber load testing
- **Scope**: High-volume operations, memory leak detection, throughput validation
- **Thresholds**: Response time < 200ms, throughput > 50 ops/sec

#### üåê Cross-Platform Testing (All Tiers)
- **Platforms**: Windows, macOS, Linux, Android
- **Scope**: Platform-specific features, file system operations, UI adaptations
- **Focus**: Manufacturing floor compatibility across all platforms

## üìã Implementation Tasks

### Phase 2A: Foundation Test Infrastructure

#### Task 1: Unit Test Implementation
- [ ] **ViewModel Unit Tests** (High Priority)
  - [ ] `InventoryViewModel` comprehensive testing
  - [ ] `QuickButtonsViewModel` testing with command validation
  - [ ] `TransactionViewModel` testing with business logic validation
  - [ ] `MainFormViewModel` navigation and state management testing
  - [ ] All remaining ViewModels (15+ total)

- [ ] **Service Unit Tests** (High Priority)
  - [ ] `InventoryService` with mocked database operations
  - [ ] `TransactionService` with business rule validation
  - [ ] `QuickButtonsService` with execution flow testing
  - [ ] `ConfigurationService` with settings validation
  - [ ] All remaining Services (10+ total)

#### Task 2: Integration Test Implementation  
- [ ] **Multi-Service Workflow Testing** (Medium Priority)
  - [ ] Inventory ‚Üí Transaction ‚Üí Logging workflow
  - [ ] QuickButton execution ‚Üí Database update ‚Üí UI refresh
  - [ ] Configuration loading ‚Üí Service initialization ‚Üí Error handling
  - [ ] Master data loading ‚Üí UI population ‚Üí User interaction

- [ ] **Database Integration Testing** (High Priority)
  - [ ] Real database connection testing
  - [ ] Transaction consistency validation
  - [ ] Stored procedure parameter validation
  - [ ] Error handling and rollback testing

#### Task 3: UI Automation Implementation
- [ ] **Core View Testing** (Medium Priority)
  - [ ] `MainView` navigation and layout testing
  - [ ] `InventoryTabView` data grid operations and filtering
  - [ ] `QuickButtonsView` dynamic button generation and execution
  - [ ] `TransactionTabView` transaction entry and validation
  - [ ] `RemoveTabView` inventory removal workflows

- [ ] **User Interaction Testing** (Medium Priority)
  - [ ] Form submission workflows
  - [ ] Data validation and error display
  - [ ] Theme switching and responsive behavior
  - [ ] Keyboard navigation and accessibility

### Phase 2B: Advanced Testing Implementation

#### Task 4: Database Performance Testing
- [ ] **Stored Procedure Performance** (Medium Priority)
  - [ ] All 45+ stored procedures performance baseline
  - [ ] High-volume data operation testing
  - [ ] Concurrent access and locking validation
  - [ ] Memory usage and connection pooling efficiency

#### Task 5: Performance and Load Testing
- [ ] **Manufacturing Workflow Load Testing** (Low Priority)
  - [ ] High-frequency inventory operations
  - [ ] Concurrent user scenarios (10+ simultaneous users)
  - [ ] Memory leak detection during extended operations
  - [ ] Database connection pool stress testing

#### Task 6: Cross-Platform Testing Implementation
- [ ] **Platform Compatibility Testing** (Medium Priority)
  - [ ] Windows desktop testing (primary platform)
  - [ ] macOS compatibility validation
  - [ ] Linux distribution testing
  - [ ] Android mobile interface testing
  - [ ] File system and path handling validation

### Phase 2C: Test Infrastructure and CI/CD

#### Task 7: Test Automation and CI/CD
- [ ] **GitHub Actions Integration** (High Priority)
  - [ ] Automated test execution on PR creation
  - [ ] Cross-platform test matrix (Windows, macOS, Linux)
  - [ ] Performance regression detection
  - [ ] Test result reporting and coverage metrics

- [ ] **Test Data Management** (Medium Priority)
  - [ ] Test database setup and seeding
  - [ ] Fixture data for consistent testing
  - [ ] Test isolation and cleanup procedures
  - [ ] Mock data generation for unit tests

## üéØ Success Criteria

### **Quantitative Metrics**
- [ ] **Code Coverage**: 95%+ on ViewModels and Services
- [ ] **Test Count**: 500+ comprehensive tests across all tiers
- [ ] **Performance**: All tests execute in < 10 minutes total
- [ ] **Cross-Platform**: 100% test pass rate on Windows, macOS, Linux
- [ ] **Database**: All 45+ stored procedures tested with performance validation

### **Qualitative Metrics**
- [ ] **Manufacturing Workflows**: All critical business processes covered
- [ ] **Error Scenarios**: Comprehensive error handling and edge case testing
- [ ] **User Experience**: UI interactions thoroughly validated
- [ ] **Platform Compatibility**: Consistent behavior across all supported platforms
- [ ] **Documentation**: All tests well-documented with clear expectations

## üöÄ Implementation Strategy

### **Agent-Driven Development Approach**
1. **Use Comprehensive Documentation**: Reference `.github/instructions/` files for context
2. **Apply Prompt Templates**: Use `.github/copilot/prompts/` templates for test generation
3. **Follow Established Patterns**: Maintain consistency with MTM architecture
4. **Incremental Implementation**: Build and validate in small, testable increments

### **Development Workflow**
1. **Select Task**: Choose specific testing task from epic
2. **Reference Documentation**: Use appropriate instruction and prompt files
3. **Generate Tests**: Create comprehensive test files using agent assistance
4. **Validate and Refine**: Ensure tests follow established patterns
5. **Integrate and Test**: Run tests and validate functionality
6. **Document Results**: Update progress and document any issues

## üè∑Ô∏è Related Issues and Dependencies

### **Dependencies**
- ‚úÖ Phase 1 Complete: Comprehensive documentation structure created (PR #76)
- ‚è≥ Test Project Structure: Create organized test project structure
- ‚è≥ CI/CD Pipeline: Update GitHub Actions for automated testing
- ‚è≥ Test Database: Setup dedicated test database instance

### **Acceptance Criteria**

#### **Epic Completion Requirements**
- [ ] All ViewModels have comprehensive unit tests with 95%+ coverage
- [ ] All Services have unit and integration tests with business logic validation
- [ ] All major Views have UI automation tests with user interaction scenarios
- [ ] All 45+ stored procedures have performance and integrity tests
- [ ] Performance testing suite validates manufacturing workflow thresholds
- [ ] Cross-platform testing ensures functionality on Windows, macOS, Linux, Android
- [ ] CI/CD pipeline automatically runs all tests on PR creation
- [ ] Test documentation provides clear guidance for maintenance and extension

#### **Manufacturing Domain Coverage**
- [ ] Inventory management workflows fully tested
- [ ] Transaction processing and history validation
- [ ] QuickButton execution and error handling
- [ ] Master data management (parts, operations, locations, users)
- [ ] Error logging and monitoring validation
- [ ] Configuration management and service initialization

## üìä Epic Progress Tracking

### **Phase 2A: Foundation (Target: 4-6 weeks)**
- Unit Tests: 0% ‚Üí 100%
- Integration Tests: 0% ‚Üí 100%
- UI Automation: 0% ‚Üí 80%

### **Phase 2B: Advanced Testing (Target: 3-4 weeks)**
- Database Performance: 0% ‚Üí 100%
- Load Testing: 0% ‚Üí 100%
- Cross-Platform: 0% ‚Üí 100%

### **Phase 2C: Infrastructure (Target: 2-3 weeks)**
- CI/CD Integration: 0% ‚Üí 100%
- Test Data Management: 0% ‚Üí 100%

## üîó Resources and References

### **Documentation References**
- [Testing Standards Instructions](../.github/instructions/testing-standards.instructions.md)
- [Unit Testing Patterns](../.github/instructions/unit-testing-patterns.instructions.md)
- [Integration Testing Patterns](../.github/instructions/integration-testing-patterns.instructions.md)
- [UI Automation Standards](../.github/instructions/ui-automation-standards.instructions.md)
- [Database Testing Patterns](../.github/instructions/database-testing-patterns.instructions.md)
- [Cross-Platform Testing Standards](../.github/instructions/cross-platform-testing-standards.instructions.md)

### **Agent Prompt Templates**
- [Create Unit Test Template](../.github/copilot/prompts/create-unit-test.prompt.md)
- [Create Integration Test Template](../.github/copilot/prompts/create-integration-test.prompt.md)
- [Create UI Test Template](../.github/copilot/prompts/create-ui-test.prompt.md)
- [Create Database Test Template](../.github/copilot/prompts/create-database-test.prompt.md)
- [Create Performance Test Template](../.github/copilot/prompts/create-performance-test.prompt.md)
- [Create Cross-Platform Test Template](../.github/copilot/prompts/create-cross-platform-test.prompt.md)

### **Technical Stack**
- .NET 8 with C# 12
- Avalonia UI 11.3.4
- MVVM Community Toolkit 8.3.2
- MySQL 9.4.0 with 45+ stored procedures
- NUnit 4.1.0, Moq 4.20.70, Avalonia.Headless, NBomber

---

## üéØ Next Steps After PR Merge

1. **Create Epic Issue**: Use this template to create the comprehensive Epic issue
2. **Break Down Tasks**: Create individual issues for each major testing component
3. **Setup Test Project Structure**: Organize test projects by testing tier
4. **Begin Agent-Driven Implementation**: Start with high-priority ViewModels and Services
5. **Establish CI/CD Pipeline**: Integrate testing into GitHub Actions workflow

**Epic Duration Estimate**: 8-12 weeks  
**Team Size**: 1-2 developers + Agent assistance  
**Priority**: High (Critical for production readiness)

---

*This Epic represents Phase 2 of the comprehensive testing infrastructure implementation. Phase 1 (documentation and templates) has been completed in PR #76.*