name: MTM Universal Framework - Cross-Platform Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  ANDROID_API_LEVEL: 34

jobs:
  # Build and test on multiple platforms
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --configuration Release --logger "trx;LogFileName=test-results-${{ matrix.os }}.trx" --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: TestResults/
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        file: TestResults/*/coverage.cobertura.xml
        flags: unittests
        name: codecov-${{ matrix.os }}

  # Windows Desktop Build
  windows-desktop:
    name: Windows Desktop Build
    runs-on: windows-latest
    needs: build-and-test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Publish Windows x64
      run: dotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:PublishTrimmed=true -o ./publish/win-x64
      
    - name: Publish Windows x86
      run: dotnet publish -c Release -r win-x86 --self-contained -p:PublishSingleFile=true -p:PublishTrimmed=true -o ./publish/win-x86
      
    - name: Create Windows ZIP
      run: |
        Compress-Archive -Path ./publish/win-x64/* -DestinationPath ./MTMUniversalApp-win-x64.zip
        Compress-Archive -Path ./publish/win-x86/* -DestinationPath ./MTMUniversalApp-win-x86.zip
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-desktop
        path: ./MTMUniversalApp-win-*.zip

  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [windows-desktop]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Get version
      id: version
      run: |
        VERSION=$(grep -oP '<Version>\K[^<]+' *.csproj | head -1)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        release_name: MTM Universal Framework v${{ steps.version.outputs.VERSION }}
        body: |
          ## MTM Universal Framework Release v${{ steps.version.outputs.VERSION }}
          
          Cross-platform application built with the MTM Universal Framework.
          
          ### Supported Platforms:
          - Windows Desktop (x64, x86)
          - macOS Desktop (x64)
          - Linux Desktop (x64)
          - Android Mobile (ARM64, x64)
        draft: false
        prerelease: false